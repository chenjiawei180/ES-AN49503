<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ES-AN49503.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ES-AN49503.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Oct 11 09:36:36 2016
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Sleep_Pin_Init &rArr; KBI_Init &rArr; assert_failed &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ACMP0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[20]">ACMP1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[1a]">ADC0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[1c]">FTM0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[1d]">FTM1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[1e]">FTM2_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[10]">FTMRE_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[13]">I2C0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[14]">I2C1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[26]">ICS_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[12]">IRQ_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[23]">KBI0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[4]">KBI0_Isr</a> from kbi.o(i.KBI0_Isr) referenced from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[24]">KBI1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[11]">LVD_LVW_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[29]">MSCAN_RX_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[5]">MSCAN_RxIsr</a> from mscan.o(i.MSCAN_RxIsr) referenced from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[2e]">MSCAN_RxProcessing</a> from mscan_api.o(i.MSCAN_RxProcessing) referenced from mscan_api.o(i.MSCAN_GlobeVaribleInit)
 <LI><a href="#[2a]">MSCAN_TX_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[6]">MSCAN_TxIsr</a> from mscan.o(i.MSCAN_TxIsr) referenced from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[2f]">MSCAN_TxProcessing</a> from mscan_api.o(i.MSCAN_TxProcessing) referenced from mscan_api.o(i.MSCAN_GlobeVaribleInit)
 <LI><a href="#[7]">NMI_Handler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[1]">NMI_Isr</a> from wdt.o(i.NMI_Isr) referenced from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[21]">PIT_CH0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[22]">PIT_CH1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[28]">PWT_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[3]">RTC_Isr</a> from rtc.o(i.RTC_Isr) referenced from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[b]">Reserved16_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[c]">Reserved17_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[d]">Reserved18_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[e]">Reserved19_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[f]">Reserved20_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[25]">Reserved42_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mke06z4.o(.text) referenced from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[30]">Sleep_Wake_Up</a> from sleep.o(i.Sleep_Wake_Up) referenced from sleep.o(i.Sleep_Pin_Init)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from start.o(i.SystemInit) referenced from startup_mke06z4.o(.text)
 <LI><a href="#[17]">UART0_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[19]">UART2_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[27]">Watchdog_IRQHandler</a> from startup_mke06z4.o(.text) referenced from startup_mke06z4.o(RESET)
 <LI><a href="#[2d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mke06z4.o(.text)
 <LI><a href="#[2]">default_isr</a> from vectors.o(i.default_isr) referenced 41 times from vectors.o(.ARM.__AT_0x00005000)
 <LI><a href="#[31]">fputc</a> from io.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[32]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[84]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[85]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[86]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[87]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
<LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[35]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[36]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[37]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FTMRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>KBI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>KBI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MSCAN_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MSCAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke06z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LoadOneFrameToBuff
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendItemToBuffer
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Pin_Init
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[8f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[90]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>CAN_APP_Init</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, can_app.o(i.CAN_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN_APP_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_GlobeVaribleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>CAN_APP_Send</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, can_app.o(i.CAN_APP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CAN_APP_Send &rArr; CAN_SendItemToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendItemToBuffer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CheckSendBufferFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>CAN_CheckSendBufferFrame</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mscan_api.o(i.CAN_CheckSendBufferFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_CheckSendBufferFrame &rArr; CAN_LoadOneFrameToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LoadOneFrameToBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Send
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_TxProcessing
</UL>

<P><STRONG><a name="[45]"></a>CAN_Init</STRONG> (Thumb, 836 bytes, Stack size 24 bytes, mscan.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUpIntEn
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUpEn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsInitialMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_InitialModeReq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Init
</UL>

<P><STRONG><a name="[4a]"></a>CAN_LoadOneFrameToBuff</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mscan.o(i.CAN_LoadOneFrameToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_LoadOneFrameToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CheckSendBufferFrame
</UL>

<P><STRONG><a name="[62]"></a>CAN_ReadOneFrameFromBuff</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, mscan.o(i.CAN_ReadOneFrameFromBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_ReadOneFrameFromBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_RxProcessing
</UL>

<P><STRONG><a name="[48]"></a>CAN_SendItemToBuffer</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, mscan_api.o(i.CAN_SendItemToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_SendItemToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Send
</UL>

<P><STRONG><a name="[6d]"></a>CRC_Calc</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, crc_1.o(i.CRC_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[51]"></a>FEI_to_FBE_OSC</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, ics.o(i.FEI_to_FBE_OSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FBE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[54]"></a>FEI_to_FEE</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ics.o(i.FEI_to_FEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[55]"></a>FEI_to_FEE_OSC</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ics.o(i.FEI_to_FEE_OSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[42]"></a>GPIO_Init</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_APP_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RED_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREEN_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Init
</UL>

<P><STRONG><a name="[43]"></a>GPIO_PinClear</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(i.GPIO_PinClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Dis
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RED_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREEN_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Init
</UL>

<P><STRONG><a name="[57]"></a>GPIO_PinSet</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(i.GPIO_PinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_En
</UL>

<P><STRONG><a name="[58]"></a>GPIO_Toggle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Toggle &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREEN_Toggle
</UL>

<P><STRONG><a name="[59]"></a>GREEN_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(i.GREEN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GREEN_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>GREEN_Toggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.GREEN_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GREEN_Toggle &rArr; GPIO_Toggle &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Wake_Up
</UL>

<P><STRONG><a name="[5b]"></a>ICS_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ics.o(i.ICS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICS_Init &rArr; FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[53]"></a>ICS_SetClkDivider</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ics.o(i.ICS_SetClkDivider))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>

<P><STRONG><a name="[80]"></a>ICS_Trim</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ics.o(i.ICS_Trim))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[5c]"></a>IIC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eeprom_24c.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>KBI0_Isr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kbi.o(i.KBI0_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KBI0_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
</UL>
<P><STRONG><a name="[5d]"></a>KBI_Init</STRONG> (Thumb, 354 bytes, Stack size 288 bytes, kbi.o(i.KBI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = KBI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Pin_Init
</UL>

<P><STRONG><a name="[72]"></a>KBI_SetCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kbi.o(i.KBI_SetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Pin_Init
</UL>

<P><STRONG><a name="[44]"></a>MSCAN_GlobeVaribleInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mscan_api.o(i.MSCAN_GlobeVaribleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSCAN_GlobeVaribleInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_SetTxCallBack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_SetRxCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Init
</UL>

<P><STRONG><a name="[5]"></a>MSCAN_RxIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mscan.o(i.MSCAN_RxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSCAN_RxIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
</UL>
<P><STRONG><a name="[2e]"></a>MSCAN_RxProcessing</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mscan_api.o(i.MSCAN_RxProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MSCAN_RxProcessing &rArr; CAN_ReadOneFrameFromBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadOneFrameFromBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mscan_api.o(i.MSCAN_GlobeVaribleInit)
</UL>
<P><STRONG><a name="[60]"></a>MSCAN_SetRxCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mscan.o(i.MSCAN_SetRxCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_GlobeVaribleInit
</UL>

<P><STRONG><a name="[61]"></a>MSCAN_SetTxCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mscan.o(i.MSCAN_SetTxCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_GlobeVaribleInit
</UL>

<P><STRONG><a name="[6]"></a>MSCAN_TxIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mscan.o(i.MSCAN_TxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSCAN_TxIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
</UL>
<P><STRONG><a name="[2f]"></a>MSCAN_TxProcessing</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, mscan_api.o(i.MSCAN_TxProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSCAN_TxProcessing &rArr; CAN_CheckSendBufferFrame &rArr; CAN_LoadOneFrameToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CheckSendBufferFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mscan_api.o(i.MSCAN_GlobeVaribleInit)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wdt.o(i.NMI_Isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
</UL>
<P><STRONG><a name="[52]"></a>OSC_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ics.o(i.OSC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>

<P><STRONG><a name="[63]"></a>RED_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(i.RED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RED_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>RTC_Isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.RTC_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
</UL>
<P><STRONG><a name="[81]"></a>SIM_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sim.o(i.SIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[65]"></a>SPI_APP_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi_app.o(i.SPI_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPI_APP_Init &rArr; SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SPI_Dis</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_app.o(i.SPI_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Dis &rArr; GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[68]"></a>SPI_En</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_app.o(i.SPI_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_En &rArr; GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[66]"></a>SPI_Init</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ModfEnable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_APP_Init
</UL>

<P><STRONG><a name="[6c]"></a>SPI_Read</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, spi_app.o(i.SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Read &rArr; SPI_En &rArr; GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_En
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Dis
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>

<P><STRONG><a name="[6b]"></a>SPI_SetBaudRate</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, spi.o(i.SPI_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[6e]"></a>SPI_TransferWait</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, spi.o(i.SPI_TransferWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_TransferWait
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[70]"></a>SPI_Write</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, spi_app.o(i.SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Write &rArr; SPI_Read &rArr; SPI_En &rArr; GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_En
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Dis
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Wake_Up
</UL>

<P><STRONG><a name="[71]"></a>Sleep_Pin_Init</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, sleep.o(i.Sleep_Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Sleep_Pin_Init &rArr; KBI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_SetCallback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>Sleep_Wake_Up</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sleep.o(i.Sleep_Wake_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sleep_Wake_Up &rArr; SPI_Write &rArr; SPI_Read &rArr; SPI_En &rArr; GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREEN_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.Sleep_Pin_Init)
</UL>
<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, start.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; WDOG_DisableWDOGEnableUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DisableWDOGEnableUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke06z4.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>UART_PutChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
</UL>

<P><STRONG><a name="[73]"></a>WDOG_DisableWDOGEnableUpdate</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, wdog.o(i.WDOG_DisableWDOGEnableUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDOG_DisableWDOGEnableUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[75]"></a>WDOG_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdog.o(i.WDOG_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Clear
</UL>

<P><STRONG><a name="[77]"></a>WDOG_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wdog.o(i.WDOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[74]"></a>WDT_Clear</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdt.o(i.WDT_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>WDT_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_Init &rArr; WDOG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[91]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[7c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[93]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[94]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[56]"></a>assert_failed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, assert.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Toggle
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[2]"></a>default_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(i.default_isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00005000)
</UL>
<P><STRONG><a name="[31]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, io.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; Sleep_Pin_Init &rArr; KBI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_APP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Clear
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RED_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREEN_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Send
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_APP_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Pin_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7d]"></a>out_char</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io.o(i.out_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7e]"></a>sysinit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, sysinit.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sysinit &rArr; SIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Trim
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kbi.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
</UL>

<P><STRONG><a name="[4b]"></a>CAN_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(i.CAN_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[4c]"></a>CAN_InitialModeReq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(i.CAN_InitialModeReq))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[4d]"></a>CAN_IsInitialMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(i.CAN_IsInitialMode))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[50]"></a>CAN_WakeUpEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(i.CAN_WakeUpEn))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[4f]"></a>CAN_WakeUpIntEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(i.CAN_WakeUpIntEn))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[4e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mscan.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[64]"></a>RTC_ClrFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.RTC_ClrFlags))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Isr
</UL>

<P><STRONG><a name="[69]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[6a]"></a>SPI_ModfEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ModfEnable))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[79]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[7b]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
